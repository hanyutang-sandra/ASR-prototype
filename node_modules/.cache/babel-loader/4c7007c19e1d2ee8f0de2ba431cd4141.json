{"ast":null,"code":"/*eslint-disable block-scoped-var, id-length, no-control-regex, no-magic-numbers, no-prototype-builtins, no-redeclare, no-shadow, no-var, sort-vars*/\n\"use strict\";\n\nvar $protobuf = require(\"protobufjs/minimal\"); // Common aliases\n\n\nvar $Reader = $protobuf.Reader,\n    $Writer = $protobuf.Writer,\n    $util = $protobuf.util; // Exported root namespace\n\nvar $root = $protobuf.roots[\"default\"] || ($protobuf.roots[\"default\"] = {});\n\n$root.grpc = function () {\n  /**\n   * Namespace grpc.\n   * @exports grpc\n   * @namespace\n   */\n  var grpc = {};\n\n  grpc.gcp = function () {\n    /**\n     * Namespace gcp.\n     * @memberof grpc\n     * @namespace\n     */\n    var gcp = {};\n\n    gcp.ApiConfig = function () {\n      /**\n       * Properties of an ApiConfig.\n       * @memberof grpc.gcp\n       * @interface IApiConfig\n       * @property {grpc.gcp.IChannelPoolConfig|null} [channelPool] ApiConfig channelPool\n       * @property {Array.<grpc.gcp.IMethodConfig>|null} [method] ApiConfig method\n       */\n\n      /**\n       * Constructs a new ApiConfig.\n       * @memberof grpc.gcp\n       * @classdesc Represents an ApiConfig.\n       * @implements IApiConfig\n       * @constructor\n       * @param {grpc.gcp.IApiConfig=} [properties] Properties to set\n       */\n      function ApiConfig(properties) {\n        this.method = [];\n        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) {\n          if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]];\n        }\n      }\n      /**\n       * ApiConfig channelPool.\n       * @member {grpc.gcp.IChannelPoolConfig|null|undefined} channelPool\n       * @memberof grpc.gcp.ApiConfig\n       * @instance\n       */\n\n\n      ApiConfig.prototype.channelPool = null;\n      /**\n       * ApiConfig method.\n       * @member {Array.<grpc.gcp.IMethodConfig>} method\n       * @memberof grpc.gcp.ApiConfig\n       * @instance\n       */\n\n      ApiConfig.prototype.method = $util.emptyArray;\n      /**\n       * Creates a new ApiConfig instance using the specified properties.\n       * @function create\n       * @memberof grpc.gcp.ApiConfig\n       * @static\n       * @param {grpc.gcp.IApiConfig=} [properties] Properties to set\n       * @returns {grpc.gcp.ApiConfig} ApiConfig instance\n       */\n\n      ApiConfig.create = function create(properties) {\n        return new ApiConfig(properties);\n      };\n      /**\n       * Encodes the specified ApiConfig message. Does not implicitly {@link grpc.gcp.ApiConfig.verify|verify} messages.\n       * @function encode\n       * @memberof grpc.gcp.ApiConfig\n       * @static\n       * @param {grpc.gcp.IApiConfig} message ApiConfig message or plain object to encode\n       * @param {$protobuf.Writer} [writer] Writer to encode to\n       * @returns {$protobuf.Writer} Writer\n       */\n\n\n      ApiConfig.encode = function encode(message, writer) {\n        if (!writer) writer = $Writer.create();\n        if (message.channelPool != null && message.hasOwnProperty(\"channelPool\")) $root.grpc.gcp.ChannelPoolConfig.encode(message.channelPool, writer.uint32(\n        /* id 2, wireType 2 =*/\n        18).fork()).ldelim();\n        if (message.method != null && message.method.length) for (var i = 0; i < message.method.length; ++i) {\n          $root.grpc.gcp.MethodConfig.encode(message.method[i], writer.uint32(\n          /* id 1001, wireType 2 =*/\n          8010).fork()).ldelim();\n        }\n        return writer;\n      };\n      /**\n       * Encodes the specified ApiConfig message, length delimited. Does not implicitly {@link grpc.gcp.ApiConfig.verify|verify} messages.\n       * @function encodeDelimited\n       * @memberof grpc.gcp.ApiConfig\n       * @static\n       * @param {grpc.gcp.IApiConfig} message ApiConfig message or plain object to encode\n       * @param {$protobuf.Writer} [writer] Writer to encode to\n       * @returns {$protobuf.Writer} Writer\n       */\n\n\n      ApiConfig.encodeDelimited = function encodeDelimited(message, writer) {\n        return this.encode(message, writer).ldelim();\n      };\n      /**\n       * Decodes an ApiConfig message from the specified reader or buffer.\n       * @function decode\n       * @memberof grpc.gcp.ApiConfig\n       * @static\n       * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n       * @param {number} [length] Message length if known beforehand\n       * @returns {grpc.gcp.ApiConfig} ApiConfig\n       * @throws {Error} If the payload is not a reader or valid buffer\n       * @throws {$protobuf.util.ProtocolError} If required fields are missing\n       */\n\n\n      ApiConfig.decode = function decode(reader, length) {\n        if (!(reader instanceof $Reader)) reader = $Reader.create(reader);\n        var end = length === undefined ? reader.len : reader.pos + length,\n            message = new $root.grpc.gcp.ApiConfig();\n\n        while (reader.pos < end) {\n          var tag = reader.uint32();\n\n          switch (tag >>> 3) {\n            case 2:\n              message.channelPool = $root.grpc.gcp.ChannelPoolConfig.decode(reader, reader.uint32());\n              break;\n\n            case 1001:\n              if (!(message.method && message.method.length)) message.method = [];\n              message.method.push($root.grpc.gcp.MethodConfig.decode(reader, reader.uint32()));\n              break;\n\n            default:\n              reader.skipType(tag & 7);\n              break;\n          }\n        }\n\n        return message;\n      };\n      /**\n       * Decodes an ApiConfig message from the specified reader or buffer, length delimited.\n       * @function decodeDelimited\n       * @memberof grpc.gcp.ApiConfig\n       * @static\n       * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n       * @returns {grpc.gcp.ApiConfig} ApiConfig\n       * @throws {Error} If the payload is not a reader or valid buffer\n       * @throws {$protobuf.util.ProtocolError} If required fields are missing\n       */\n\n\n      ApiConfig.decodeDelimited = function decodeDelimited(reader) {\n        if (!(reader instanceof $Reader)) reader = new $Reader(reader);\n        return this.decode(reader, reader.uint32());\n      };\n      /**\n       * Verifies an ApiConfig message.\n       * @function verify\n       * @memberof grpc.gcp.ApiConfig\n       * @static\n       * @param {Object.<string,*>} message Plain object to verify\n       * @returns {string|null} `null` if valid, otherwise the reason why it is not\n       */\n\n\n      ApiConfig.verify = function verify(message) {\n        if (typeof message !== \"object\" || message === null) return \"object expected\";\n\n        if (message.channelPool != null && message.hasOwnProperty(\"channelPool\")) {\n          var error = $root.grpc.gcp.ChannelPoolConfig.verify(message.channelPool);\n          if (error) return \"channelPool.\" + error;\n        }\n\n        if (message.method != null && message.hasOwnProperty(\"method\")) {\n          if (!Array.isArray(message.method)) return \"method: array expected\";\n\n          for (var i = 0; i < message.method.length; ++i) {\n            var error = $root.grpc.gcp.MethodConfig.verify(message.method[i]);\n            if (error) return \"method.\" + error;\n          }\n        }\n\n        return null;\n      };\n      /**\n       * Creates an ApiConfig message from a plain object. Also converts values to their respective internal types.\n       * @function fromObject\n       * @memberof grpc.gcp.ApiConfig\n       * @static\n       * @param {Object.<string,*>} object Plain object\n       * @returns {grpc.gcp.ApiConfig} ApiConfig\n       */\n\n\n      ApiConfig.fromObject = function fromObject(object) {\n        if (object instanceof $root.grpc.gcp.ApiConfig) return object;\n        var message = new $root.grpc.gcp.ApiConfig();\n\n        if (object.channelPool != null) {\n          if (typeof object.channelPool !== \"object\") throw TypeError(\".grpc.gcp.ApiConfig.channelPool: object expected\");\n          message.channelPool = $root.grpc.gcp.ChannelPoolConfig.fromObject(object.channelPool);\n        }\n\n        if (object.method) {\n          if (!Array.isArray(object.method)) throw TypeError(\".grpc.gcp.ApiConfig.method: array expected\");\n          message.method = [];\n\n          for (var i = 0; i < object.method.length; ++i) {\n            if (typeof object.method[i] !== \"object\") throw TypeError(\".grpc.gcp.ApiConfig.method: object expected\");\n            message.method[i] = $root.grpc.gcp.MethodConfig.fromObject(object.method[i]);\n          }\n        }\n\n        return message;\n      };\n      /**\n       * Creates a plain object from an ApiConfig message. Also converts values to other types if specified.\n       * @function toObject\n       * @memberof grpc.gcp.ApiConfig\n       * @static\n       * @param {grpc.gcp.ApiConfig} message ApiConfig\n       * @param {$protobuf.IConversionOptions} [options] Conversion options\n       * @returns {Object.<string,*>} Plain object\n       */\n\n\n      ApiConfig.toObject = function toObject(message, options) {\n        if (!options) options = {};\n        var object = {};\n        if (options.arrays || options.defaults) object.method = [];\n        if (options.defaults) object.channelPool = null;\n        if (message.channelPool != null && message.hasOwnProperty(\"channelPool\")) object.channelPool = $root.grpc.gcp.ChannelPoolConfig.toObject(message.channelPool, options);\n\n        if (message.method && message.method.length) {\n          object.method = [];\n\n          for (var j = 0; j < message.method.length; ++j) {\n            object.method[j] = $root.grpc.gcp.MethodConfig.toObject(message.method[j], options);\n          }\n        }\n\n        return object;\n      };\n      /**\n       * Converts this ApiConfig to JSON.\n       * @function toJSON\n       * @memberof grpc.gcp.ApiConfig\n       * @instance\n       * @returns {Object.<string,*>} JSON object\n       */\n\n\n      ApiConfig.prototype.toJSON = function toJSON() {\n        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n      };\n\n      return ApiConfig;\n    }();\n\n    gcp.ChannelPoolConfig = function () {\n      /**\n       * Properties of a ChannelPoolConfig.\n       * @memberof grpc.gcp\n       * @interface IChannelPoolConfig\n       * @property {number|null} [maxSize] ChannelPoolConfig maxSize\n       * @property {number|Long|null} [idleTimeout] ChannelPoolConfig idleTimeout\n       * @property {number|null} [maxConcurrentStreamsLowWatermark] ChannelPoolConfig maxConcurrentStreamsLowWatermark\n       */\n\n      /**\n       * Constructs a new ChannelPoolConfig.\n       * @memberof grpc.gcp\n       * @classdesc Represents a ChannelPoolConfig.\n       * @implements IChannelPoolConfig\n       * @constructor\n       * @param {grpc.gcp.IChannelPoolConfig=} [properties] Properties to set\n       */\n      function ChannelPoolConfig(properties) {\n        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) {\n          if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]];\n        }\n      }\n      /**\n       * ChannelPoolConfig maxSize.\n       * @member {number} maxSize\n       * @memberof grpc.gcp.ChannelPoolConfig\n       * @instance\n       */\n\n\n      ChannelPoolConfig.prototype.maxSize = 0;\n      /**\n       * ChannelPoolConfig idleTimeout.\n       * @member {number|Long} idleTimeout\n       * @memberof grpc.gcp.ChannelPoolConfig\n       * @instance\n       */\n\n      ChannelPoolConfig.prototype.idleTimeout = $util.Long ? $util.Long.fromBits(0, 0, true) : 0;\n      /**\n       * ChannelPoolConfig maxConcurrentStreamsLowWatermark.\n       * @member {number} maxConcurrentStreamsLowWatermark\n       * @memberof grpc.gcp.ChannelPoolConfig\n       * @instance\n       */\n\n      ChannelPoolConfig.prototype.maxConcurrentStreamsLowWatermark = 0;\n      /**\n       * Creates a new ChannelPoolConfig instance using the specified properties.\n       * @function create\n       * @memberof grpc.gcp.ChannelPoolConfig\n       * @static\n       * @param {grpc.gcp.IChannelPoolConfig=} [properties] Properties to set\n       * @returns {grpc.gcp.ChannelPoolConfig} ChannelPoolConfig instance\n       */\n\n      ChannelPoolConfig.create = function create(properties) {\n        return new ChannelPoolConfig(properties);\n      };\n      /**\n       * Encodes the specified ChannelPoolConfig message. Does not implicitly {@link grpc.gcp.ChannelPoolConfig.verify|verify} messages.\n       * @function encode\n       * @memberof grpc.gcp.ChannelPoolConfig\n       * @static\n       * @param {grpc.gcp.IChannelPoolConfig} message ChannelPoolConfig message or plain object to encode\n       * @param {$protobuf.Writer} [writer] Writer to encode to\n       * @returns {$protobuf.Writer} Writer\n       */\n\n\n      ChannelPoolConfig.encode = function encode(message, writer) {\n        if (!writer) writer = $Writer.create();\n        if (message.maxSize != null && message.hasOwnProperty(\"maxSize\")) writer.uint32(\n        /* id 1, wireType 0 =*/\n        8).uint32(message.maxSize);\n        if (message.idleTimeout != null && message.hasOwnProperty(\"idleTimeout\")) writer.uint32(\n        /* id 2, wireType 0 =*/\n        16).uint64(message.idleTimeout);\n        if (message.maxConcurrentStreamsLowWatermark != null && message.hasOwnProperty(\"maxConcurrentStreamsLowWatermark\")) writer.uint32(\n        /* id 3, wireType 0 =*/\n        24).uint32(message.maxConcurrentStreamsLowWatermark);\n        return writer;\n      };\n      /**\n       * Encodes the specified ChannelPoolConfig message, length delimited. Does not implicitly {@link grpc.gcp.ChannelPoolConfig.verify|verify} messages.\n       * @function encodeDelimited\n       * @memberof grpc.gcp.ChannelPoolConfig\n       * @static\n       * @param {grpc.gcp.IChannelPoolConfig} message ChannelPoolConfig message or plain object to encode\n       * @param {$protobuf.Writer} [writer] Writer to encode to\n       * @returns {$protobuf.Writer} Writer\n       */\n\n\n      ChannelPoolConfig.encodeDelimited = function encodeDelimited(message, writer) {\n        return this.encode(message, writer).ldelim();\n      };\n      /**\n       * Decodes a ChannelPoolConfig message from the specified reader or buffer.\n       * @function decode\n       * @memberof grpc.gcp.ChannelPoolConfig\n       * @static\n       * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n       * @param {number} [length] Message length if known beforehand\n       * @returns {grpc.gcp.ChannelPoolConfig} ChannelPoolConfig\n       * @throws {Error} If the payload is not a reader or valid buffer\n       * @throws {$protobuf.util.ProtocolError} If required fields are missing\n       */\n\n\n      ChannelPoolConfig.decode = function decode(reader, length) {\n        if (!(reader instanceof $Reader)) reader = $Reader.create(reader);\n        var end = length === undefined ? reader.len : reader.pos + length,\n            message = new $root.grpc.gcp.ChannelPoolConfig();\n\n        while (reader.pos < end) {\n          var tag = reader.uint32();\n\n          switch (tag >>> 3) {\n            case 1:\n              message.maxSize = reader.uint32();\n              break;\n\n            case 2:\n              message.idleTimeout = reader.uint64();\n              break;\n\n            case 3:\n              message.maxConcurrentStreamsLowWatermark = reader.uint32();\n              break;\n\n            default:\n              reader.skipType(tag & 7);\n              break;\n          }\n        }\n\n        return message;\n      };\n      /**\n       * Decodes a ChannelPoolConfig message from the specified reader or buffer, length delimited.\n       * @function decodeDelimited\n       * @memberof grpc.gcp.ChannelPoolConfig\n       * @static\n       * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n       * @returns {grpc.gcp.ChannelPoolConfig} ChannelPoolConfig\n       * @throws {Error} If the payload is not a reader or valid buffer\n       * @throws {$protobuf.util.ProtocolError} If required fields are missing\n       */\n\n\n      ChannelPoolConfig.decodeDelimited = function decodeDelimited(reader) {\n        if (!(reader instanceof $Reader)) reader = new $Reader(reader);\n        return this.decode(reader, reader.uint32());\n      };\n      /**\n       * Verifies a ChannelPoolConfig message.\n       * @function verify\n       * @memberof grpc.gcp.ChannelPoolConfig\n       * @static\n       * @param {Object.<string,*>} message Plain object to verify\n       * @returns {string|null} `null` if valid, otherwise the reason why it is not\n       */\n\n\n      ChannelPoolConfig.verify = function verify(message) {\n        if (typeof message !== \"object\" || message === null) return \"object expected\";\n        if (message.maxSize != null && message.hasOwnProperty(\"maxSize\")) if (!$util.isInteger(message.maxSize)) return \"maxSize: integer expected\";\n        if (message.idleTimeout != null && message.hasOwnProperty(\"idleTimeout\")) if (!$util.isInteger(message.idleTimeout) && !(message.idleTimeout && $util.isInteger(message.idleTimeout.low) && $util.isInteger(message.idleTimeout.high))) return \"idleTimeout: integer|Long expected\";\n        if (message.maxConcurrentStreamsLowWatermark != null && message.hasOwnProperty(\"maxConcurrentStreamsLowWatermark\")) if (!$util.isInteger(message.maxConcurrentStreamsLowWatermark)) return \"maxConcurrentStreamsLowWatermark: integer expected\";\n        return null;\n      };\n      /**\n       * Creates a ChannelPoolConfig message from a plain object. Also converts values to their respective internal types.\n       * @function fromObject\n       * @memberof grpc.gcp.ChannelPoolConfig\n       * @static\n       * @param {Object.<string,*>} object Plain object\n       * @returns {grpc.gcp.ChannelPoolConfig} ChannelPoolConfig\n       */\n\n\n      ChannelPoolConfig.fromObject = function fromObject(object) {\n        if (object instanceof $root.grpc.gcp.ChannelPoolConfig) return object;\n        var message = new $root.grpc.gcp.ChannelPoolConfig();\n        if (object.maxSize != null) message.maxSize = object.maxSize >>> 0;\n        if (object.idleTimeout != null) if ($util.Long) (message.idleTimeout = $util.Long.fromValue(object.idleTimeout)).unsigned = true;else if (typeof object.idleTimeout === \"string\") message.idleTimeout = parseInt(object.idleTimeout, 10);else if (typeof object.idleTimeout === \"number\") message.idleTimeout = object.idleTimeout;else if (typeof object.idleTimeout === \"object\") message.idleTimeout = new $util.LongBits(object.idleTimeout.low >>> 0, object.idleTimeout.high >>> 0).toNumber(true);\n        if (object.maxConcurrentStreamsLowWatermark != null) message.maxConcurrentStreamsLowWatermark = object.maxConcurrentStreamsLowWatermark >>> 0;\n        return message;\n      };\n      /**\n       * Creates a plain object from a ChannelPoolConfig message. Also converts values to other types if specified.\n       * @function toObject\n       * @memberof grpc.gcp.ChannelPoolConfig\n       * @static\n       * @param {grpc.gcp.ChannelPoolConfig} message ChannelPoolConfig\n       * @param {$protobuf.IConversionOptions} [options] Conversion options\n       * @returns {Object.<string,*>} Plain object\n       */\n\n\n      ChannelPoolConfig.toObject = function toObject(message, options) {\n        if (!options) options = {};\n        var object = {};\n\n        if (options.defaults) {\n          object.maxSize = 0;\n\n          if ($util.Long) {\n            var long = new $util.Long(0, 0, true);\n            object.idleTimeout = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n          } else object.idleTimeout = options.longs === String ? \"0\" : 0;\n\n          object.maxConcurrentStreamsLowWatermark = 0;\n        }\n\n        if (message.maxSize != null && message.hasOwnProperty(\"maxSize\")) object.maxSize = message.maxSize;\n        if (message.idleTimeout != null && message.hasOwnProperty(\"idleTimeout\")) if (typeof message.idleTimeout === \"number\") object.idleTimeout = options.longs === String ? String(message.idleTimeout) : message.idleTimeout;else object.idleTimeout = options.longs === String ? $util.Long.prototype.toString.call(message.idleTimeout) : options.longs === Number ? new $util.LongBits(message.idleTimeout.low >>> 0, message.idleTimeout.high >>> 0).toNumber(true) : message.idleTimeout;\n        if (message.maxConcurrentStreamsLowWatermark != null && message.hasOwnProperty(\"maxConcurrentStreamsLowWatermark\")) object.maxConcurrentStreamsLowWatermark = message.maxConcurrentStreamsLowWatermark;\n        return object;\n      };\n      /**\n       * Converts this ChannelPoolConfig to JSON.\n       * @function toJSON\n       * @memberof grpc.gcp.ChannelPoolConfig\n       * @instance\n       * @returns {Object.<string,*>} JSON object\n       */\n\n\n      ChannelPoolConfig.prototype.toJSON = function toJSON() {\n        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n      };\n\n      return ChannelPoolConfig;\n    }();\n\n    gcp.MethodConfig = function () {\n      /**\n       * Properties of a MethodConfig.\n       * @memberof grpc.gcp\n       * @interface IMethodConfig\n       * @property {Array.<string>|null} [name] MethodConfig name\n       * @property {grpc.gcp.IAffinityConfig|null} [affinity] MethodConfig affinity\n       */\n\n      /**\n       * Constructs a new MethodConfig.\n       * @memberof grpc.gcp\n       * @classdesc Represents a MethodConfig.\n       * @implements IMethodConfig\n       * @constructor\n       * @param {grpc.gcp.IMethodConfig=} [properties] Properties to set\n       */\n      function MethodConfig(properties) {\n        this.name = [];\n        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) {\n          if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]];\n        }\n      }\n      /**\n       * MethodConfig name.\n       * @member {Array.<string>} name\n       * @memberof grpc.gcp.MethodConfig\n       * @instance\n       */\n\n\n      MethodConfig.prototype.name = $util.emptyArray;\n      /**\n       * MethodConfig affinity.\n       * @member {grpc.gcp.IAffinityConfig|null|undefined} affinity\n       * @memberof grpc.gcp.MethodConfig\n       * @instance\n       */\n\n      MethodConfig.prototype.affinity = null;\n      /**\n       * Creates a new MethodConfig instance using the specified properties.\n       * @function create\n       * @memberof grpc.gcp.MethodConfig\n       * @static\n       * @param {grpc.gcp.IMethodConfig=} [properties] Properties to set\n       * @returns {grpc.gcp.MethodConfig} MethodConfig instance\n       */\n\n      MethodConfig.create = function create(properties) {\n        return new MethodConfig(properties);\n      };\n      /**\n       * Encodes the specified MethodConfig message. Does not implicitly {@link grpc.gcp.MethodConfig.verify|verify} messages.\n       * @function encode\n       * @memberof grpc.gcp.MethodConfig\n       * @static\n       * @param {grpc.gcp.IMethodConfig} message MethodConfig message or plain object to encode\n       * @param {$protobuf.Writer} [writer] Writer to encode to\n       * @returns {$protobuf.Writer} Writer\n       */\n\n\n      MethodConfig.encode = function encode(message, writer) {\n        if (!writer) writer = $Writer.create();\n        if (message.name != null && message.name.length) for (var i = 0; i < message.name.length; ++i) {\n          writer.uint32(\n          /* id 1, wireType 2 =*/\n          10).string(message.name[i]);\n        }\n        if (message.affinity != null && message.hasOwnProperty(\"affinity\")) $root.grpc.gcp.AffinityConfig.encode(message.affinity, writer.uint32(\n        /* id 1001, wireType 2 =*/\n        8010).fork()).ldelim();\n        return writer;\n      };\n      /**\n       * Encodes the specified MethodConfig message, length delimited. Does not implicitly {@link grpc.gcp.MethodConfig.verify|verify} messages.\n       * @function encodeDelimited\n       * @memberof grpc.gcp.MethodConfig\n       * @static\n       * @param {grpc.gcp.IMethodConfig} message MethodConfig message or plain object to encode\n       * @param {$protobuf.Writer} [writer] Writer to encode to\n       * @returns {$protobuf.Writer} Writer\n       */\n\n\n      MethodConfig.encodeDelimited = function encodeDelimited(message, writer) {\n        return this.encode(message, writer).ldelim();\n      };\n      /**\n       * Decodes a MethodConfig message from the specified reader or buffer.\n       * @function decode\n       * @memberof grpc.gcp.MethodConfig\n       * @static\n       * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n       * @param {number} [length] Message length if known beforehand\n       * @returns {grpc.gcp.MethodConfig} MethodConfig\n       * @throws {Error} If the payload is not a reader or valid buffer\n       * @throws {$protobuf.util.ProtocolError} If required fields are missing\n       */\n\n\n      MethodConfig.decode = function decode(reader, length) {\n        if (!(reader instanceof $Reader)) reader = $Reader.create(reader);\n        var end = length === undefined ? reader.len : reader.pos + length,\n            message = new $root.grpc.gcp.MethodConfig();\n\n        while (reader.pos < end) {\n          var tag = reader.uint32();\n\n          switch (tag >>> 3) {\n            case 1:\n              if (!(message.name && message.name.length)) message.name = [];\n              message.name.push(reader.string());\n              break;\n\n            case 1001:\n              message.affinity = $root.grpc.gcp.AffinityConfig.decode(reader, reader.uint32());\n              break;\n\n            default:\n              reader.skipType(tag & 7);\n              break;\n          }\n        }\n\n        return message;\n      };\n      /**\n       * Decodes a MethodConfig message from the specified reader or buffer, length delimited.\n       * @function decodeDelimited\n       * @memberof grpc.gcp.MethodConfig\n       * @static\n       * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n       * @returns {grpc.gcp.MethodConfig} MethodConfig\n       * @throws {Error} If the payload is not a reader or valid buffer\n       * @throws {$protobuf.util.ProtocolError} If required fields are missing\n       */\n\n\n      MethodConfig.decodeDelimited = function decodeDelimited(reader) {\n        if (!(reader instanceof $Reader)) reader = new $Reader(reader);\n        return this.decode(reader, reader.uint32());\n      };\n      /**\n       * Verifies a MethodConfig message.\n       * @function verify\n       * @memberof grpc.gcp.MethodConfig\n       * @static\n       * @param {Object.<string,*>} message Plain object to verify\n       * @returns {string|null} `null` if valid, otherwise the reason why it is not\n       */\n\n\n      MethodConfig.verify = function verify(message) {\n        if (typeof message !== \"object\" || message === null) return \"object expected\";\n\n        if (message.name != null && message.hasOwnProperty(\"name\")) {\n          if (!Array.isArray(message.name)) return \"name: array expected\";\n\n          for (var i = 0; i < message.name.length; ++i) {\n            if (!$util.isString(message.name[i])) return \"name: string[] expected\";\n          }\n        }\n\n        if (message.affinity != null && message.hasOwnProperty(\"affinity\")) {\n          var error = $root.grpc.gcp.AffinityConfig.verify(message.affinity);\n          if (error) return \"affinity.\" + error;\n        }\n\n        return null;\n      };\n      /**\n       * Creates a MethodConfig message from a plain object. Also converts values to their respective internal types.\n       * @function fromObject\n       * @memberof grpc.gcp.MethodConfig\n       * @static\n       * @param {Object.<string,*>} object Plain object\n       * @returns {grpc.gcp.MethodConfig} MethodConfig\n       */\n\n\n      MethodConfig.fromObject = function fromObject(object) {\n        if (object instanceof $root.grpc.gcp.MethodConfig) return object;\n        var message = new $root.grpc.gcp.MethodConfig();\n\n        if (object.name) {\n          if (!Array.isArray(object.name)) throw TypeError(\".grpc.gcp.MethodConfig.name: array expected\");\n          message.name = [];\n\n          for (var i = 0; i < object.name.length; ++i) {\n            message.name[i] = String(object.name[i]);\n          }\n        }\n\n        if (object.affinity != null) {\n          if (typeof object.affinity !== \"object\") throw TypeError(\".grpc.gcp.MethodConfig.affinity: object expected\");\n          message.affinity = $root.grpc.gcp.AffinityConfig.fromObject(object.affinity);\n        }\n\n        return message;\n      };\n      /**\n       * Creates a plain object from a MethodConfig message. Also converts values to other types if specified.\n       * @function toObject\n       * @memberof grpc.gcp.MethodConfig\n       * @static\n       * @param {grpc.gcp.MethodConfig} message MethodConfig\n       * @param {$protobuf.IConversionOptions} [options] Conversion options\n       * @returns {Object.<string,*>} Plain object\n       */\n\n\n      MethodConfig.toObject = function toObject(message, options) {\n        if (!options) options = {};\n        var object = {};\n        if (options.arrays || options.defaults) object.name = [];\n        if (options.defaults) object.affinity = null;\n\n        if (message.name && message.name.length) {\n          object.name = [];\n\n          for (var j = 0; j < message.name.length; ++j) {\n            object.name[j] = message.name[j];\n          }\n        }\n\n        if (message.affinity != null && message.hasOwnProperty(\"affinity\")) object.affinity = $root.grpc.gcp.AffinityConfig.toObject(message.affinity, options);\n        return object;\n      };\n      /**\n       * Converts this MethodConfig to JSON.\n       * @function toJSON\n       * @memberof grpc.gcp.MethodConfig\n       * @instance\n       * @returns {Object.<string,*>} JSON object\n       */\n\n\n      MethodConfig.prototype.toJSON = function toJSON() {\n        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n      };\n\n      return MethodConfig;\n    }();\n\n    gcp.AffinityConfig = function () {\n      /**\n       * Properties of an AffinityConfig.\n       * @memberof grpc.gcp\n       * @interface IAffinityConfig\n       * @property {grpc.gcp.AffinityConfig.Command|null} [command] AffinityConfig command\n       * @property {string|null} [affinityKey] AffinityConfig affinityKey\n       */\n\n      /**\n       * Constructs a new AffinityConfig.\n       * @memberof grpc.gcp\n       * @classdesc Represents an AffinityConfig.\n       * @implements IAffinityConfig\n       * @constructor\n       * @param {grpc.gcp.IAffinityConfig=} [properties] Properties to set\n       */\n      function AffinityConfig(properties) {\n        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) {\n          if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]];\n        }\n      }\n      /**\n       * AffinityConfig command.\n       * @member {grpc.gcp.AffinityConfig.Command} command\n       * @memberof grpc.gcp.AffinityConfig\n       * @instance\n       */\n\n\n      AffinityConfig.prototype.command = 0;\n      /**\n       * AffinityConfig affinityKey.\n       * @member {string} affinityKey\n       * @memberof grpc.gcp.AffinityConfig\n       * @instance\n       */\n\n      AffinityConfig.prototype.affinityKey = \"\";\n      /**\n       * Creates a new AffinityConfig instance using the specified properties.\n       * @function create\n       * @memberof grpc.gcp.AffinityConfig\n       * @static\n       * @param {grpc.gcp.IAffinityConfig=} [properties] Properties to set\n       * @returns {grpc.gcp.AffinityConfig} AffinityConfig instance\n       */\n\n      AffinityConfig.create = function create(properties) {\n        return new AffinityConfig(properties);\n      };\n      /**\n       * Encodes the specified AffinityConfig message. Does not implicitly {@link grpc.gcp.AffinityConfig.verify|verify} messages.\n       * @function encode\n       * @memberof grpc.gcp.AffinityConfig\n       * @static\n       * @param {grpc.gcp.IAffinityConfig} message AffinityConfig message or plain object to encode\n       * @param {$protobuf.Writer} [writer] Writer to encode to\n       * @returns {$protobuf.Writer} Writer\n       */\n\n\n      AffinityConfig.encode = function encode(message, writer) {\n        if (!writer) writer = $Writer.create();\n        if (message.command != null && message.hasOwnProperty(\"command\")) writer.uint32(\n        /* id 2, wireType 0 =*/\n        16).int32(message.command);\n        if (message.affinityKey != null && message.hasOwnProperty(\"affinityKey\")) writer.uint32(\n        /* id 3, wireType 2 =*/\n        26).string(message.affinityKey);\n        return writer;\n      };\n      /**\n       * Encodes the specified AffinityConfig message, length delimited. Does not implicitly {@link grpc.gcp.AffinityConfig.verify|verify} messages.\n       * @function encodeDelimited\n       * @memberof grpc.gcp.AffinityConfig\n       * @static\n       * @param {grpc.gcp.IAffinityConfig} message AffinityConfig message or plain object to encode\n       * @param {$protobuf.Writer} [writer] Writer to encode to\n       * @returns {$protobuf.Writer} Writer\n       */\n\n\n      AffinityConfig.encodeDelimited = function encodeDelimited(message, writer) {\n        return this.encode(message, writer).ldelim();\n      };\n      /**\n       * Decodes an AffinityConfig message from the specified reader or buffer.\n       * @function decode\n       * @memberof grpc.gcp.AffinityConfig\n       * @static\n       * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n       * @param {number} [length] Message length if known beforehand\n       * @returns {grpc.gcp.AffinityConfig} AffinityConfig\n       * @throws {Error} If the payload is not a reader or valid buffer\n       * @throws {$protobuf.util.ProtocolError} If required fields are missing\n       */\n\n\n      AffinityConfig.decode = function decode(reader, length) {\n        if (!(reader instanceof $Reader)) reader = $Reader.create(reader);\n        var end = length === undefined ? reader.len : reader.pos + length,\n            message = new $root.grpc.gcp.AffinityConfig();\n\n        while (reader.pos < end) {\n          var tag = reader.uint32();\n\n          switch (tag >>> 3) {\n            case 2:\n              message.command = reader.int32();\n              break;\n\n            case 3:\n              message.affinityKey = reader.string();\n              break;\n\n            default:\n              reader.skipType(tag & 7);\n              break;\n          }\n        }\n\n        return message;\n      };\n      /**\n       * Decodes an AffinityConfig message from the specified reader or buffer, length delimited.\n       * @function decodeDelimited\n       * @memberof grpc.gcp.AffinityConfig\n       * @static\n       * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n       * @returns {grpc.gcp.AffinityConfig} AffinityConfig\n       * @throws {Error} If the payload is not a reader or valid buffer\n       * @throws {$protobuf.util.ProtocolError} If required fields are missing\n       */\n\n\n      AffinityConfig.decodeDelimited = function decodeDelimited(reader) {\n        if (!(reader instanceof $Reader)) reader = new $Reader(reader);\n        return this.decode(reader, reader.uint32());\n      };\n      /**\n       * Verifies an AffinityConfig message.\n       * @function verify\n       * @memberof grpc.gcp.AffinityConfig\n       * @static\n       * @param {Object.<string,*>} message Plain object to verify\n       * @returns {string|null} `null` if valid, otherwise the reason why it is not\n       */\n\n\n      AffinityConfig.verify = function verify(message) {\n        if (typeof message !== \"object\" || message === null) return \"object expected\";\n        if (message.command != null && message.hasOwnProperty(\"command\")) switch (message.command) {\n          default:\n            return \"command: enum value expected\";\n\n          case 0:\n          case 1:\n          case 2:\n            break;\n        }\n        if (message.affinityKey != null && message.hasOwnProperty(\"affinityKey\")) if (!$util.isString(message.affinityKey)) return \"affinityKey: string expected\";\n        return null;\n      };\n      /**\n       * Creates an AffinityConfig message from a plain object. Also converts values to their respective internal types.\n       * @function fromObject\n       * @memberof grpc.gcp.AffinityConfig\n       * @static\n       * @param {Object.<string,*>} object Plain object\n       * @returns {grpc.gcp.AffinityConfig} AffinityConfig\n       */\n\n\n      AffinityConfig.fromObject = function fromObject(object) {\n        if (object instanceof $root.grpc.gcp.AffinityConfig) return object;\n        var message = new $root.grpc.gcp.AffinityConfig();\n\n        switch (object.command) {\n          case \"BOUND\":\n          case 0:\n            message.command = 0;\n            break;\n\n          case \"BIND\":\n          case 1:\n            message.command = 1;\n            break;\n\n          case \"UNBIND\":\n          case 2:\n            message.command = 2;\n            break;\n        }\n\n        if (object.affinityKey != null) message.affinityKey = String(object.affinityKey);\n        return message;\n      };\n      /**\n       * Creates a plain object from an AffinityConfig message. Also converts values to other types if specified.\n       * @function toObject\n       * @memberof grpc.gcp.AffinityConfig\n       * @static\n       * @param {grpc.gcp.AffinityConfig} message AffinityConfig\n       * @param {$protobuf.IConversionOptions} [options] Conversion options\n       * @returns {Object.<string,*>} Plain object\n       */\n\n\n      AffinityConfig.toObject = function toObject(message, options) {\n        if (!options) options = {};\n        var object = {};\n\n        if (options.defaults) {\n          object.command = options.enums === String ? \"BOUND\" : 0;\n          object.affinityKey = \"\";\n        }\n\n        if (message.command != null && message.hasOwnProperty(\"command\")) object.command = options.enums === String ? $root.grpc.gcp.AffinityConfig.Command[message.command] : message.command;\n        if (message.affinityKey != null && message.hasOwnProperty(\"affinityKey\")) object.affinityKey = message.affinityKey;\n        return object;\n      };\n      /**\n       * Converts this AffinityConfig to JSON.\n       * @function toJSON\n       * @memberof grpc.gcp.AffinityConfig\n       * @instance\n       * @returns {Object.<string,*>} JSON object\n       */\n\n\n      AffinityConfig.prototype.toJSON = function toJSON() {\n        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n      };\n      /**\n       * Command enum.\n       * @name grpc.gcp.AffinityConfig.Command\n       * @enum {string}\n       * @property {number} BOUND=0 BOUND value\n       * @property {number} BIND=1 BIND value\n       * @property {number} UNBIND=2 UNBIND value\n       */\n\n\n      AffinityConfig.Command = function () {\n        var valuesById = {},\n            values = Object.create(valuesById);\n        values[valuesById[0] = \"BOUND\"] = 0;\n        values[valuesById[1] = \"BIND\"] = 1;\n        values[valuesById[2] = \"UNBIND\"] = 2;\n        return values;\n      }();\n\n      return AffinityConfig;\n    }();\n\n    return gcp;\n  }();\n\n  return grpc;\n}();\n\nmodule.exports = $root;","map":null,"metadata":{},"sourceType":"script"}